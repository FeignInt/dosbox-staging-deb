# This is a basic workflow to help you get started with Actions
---
name: Weekly PPA
on:
  push:
    tags:
      - weekly  # just to trigger a test build
  schedule:
    - cron: 0 4 * * 5  # 04:00 UTC Fridays
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: setup env
        env:
          PPA_GPG_SSB_PK: ${{ secrets.PPA_GPG_SSB_PK }}
          DEBIAN_BRANCH: "debianish"
          UPSTREAM_REPO: "dosbox-staging/dosbox-staging"
          DEBFULLNAME: "Feignint"
          DEBEMAIL: "37488595+FeignInt@users.noreply.github.com"
          PPA_REPO: "feignint/dosbox-staging-weekly"
          GPG_TTY: "not a tty"
          LP_API: "https://api.launchpad.net/1.0/ubuntu/"
          MIN_UBUNTU: "18.04"
          # NOTE that only the first two digits are used, [[ 16 >= 14 ]]
          # 14.04 is the same as 14.10
        run: |
          set -x
          # import private gpg key used to sign, this must match the gpg key
          # registered with the PPA being pushed to.

          # support both "ASCII armoured" and straight base64
          if [[ ${PPA_GPG_SSB_PK:0:10} == "-----BEGIN" ]]
          then
            # gpg --armor --export-secret-subkeys <ID>
            gpg --batch --import <<<"$PPA_GPG_SSB_PK" || exit 101
          else
            # no ascii armor wrapper, so assume base64 encoded
            # e.g. gpg --export-secret-subkeys | base64
            gpg --batch --import < <(
               base64 --decode <<<"$PPA_GPG_SSB_PK" ) || exit 101
          fi
          # no point continuing if gpg key does not work
          gpg --clearsign <<<"test" > /dev/null

          get_supported_distros()
          {
            # This gets the current distros PPA can build for
            # excluding anything older than $MIN_UBUNTU
            # TODO loop a bit if network flacky
            jq -jc '.entries[] |
                    select( .status      != "Obsolete" and
                            .version[:2] >= "'${MIN_UBUNTU:0:2}'"
                          ) | { name: .name, version: .version }
                   ' < <( curl --silent --compressed "${LP_API}series" ) ||
                          exit 10
          }
          PPA_DISTROS="$( get_supported_distros )"

          Get_tags_json()
          {
            curl --silent     \
                 --compressed \
                 "${GITHUB_API_URL}/repos/$1/tags"
            #TODO make more robust, i.e. loop a bit if timeout
          }
          last_alpha_commit_url()
          {
            # returns link to json about most recent -alpha commit
            jq -r '.[] | select( .name |
                    test("^v.+alpha") )| .commit.url, halt
                  ' < <( Get_tags_json "${UPSTREAM_REPO}" )
            # TODO confirm order, looks like it is pre-sorted
            # I expect v0.77.0-alpha would be 'above' v0.76...
          }
          last_alpha_commit_date()
          {
            # returns date of most recent -alpha commit
            jq -r '.commit.committer.date
                  ' < <( curl -s --compressed "$( last_alpha_commit_url )" )
          }
          # SHALLOW_SINCE will be used to fetch minimal git history
          SHALLOW_SINCE="$( last_alpha_commit_date )"
          # i.e. I need the tag, so git describe returns something that can
          # be used as a debian version string

          for envvar in       \
               DEBIAN_BRANCH  \
               UPSTREAM_REPO  \
               DEBFULLNAME    \
               DEBEMAIL       \
               PPA_REPO       \
               GPG_TTY        \
               LP_API         \
               MIN_UBUNTU     \
               PPA_DISTROS    \
               SHALLOW_SINCE  \
          ;do
            declare -n envvar_nameref="$envvar"
            printf "::set-env name=%s::%s\n"  \
                    "${envvar}"               \
                    "${envvar_nameref}"
          done
      - name: install depends
        run: |
          set -x
          sudo apt-get update # upgrade takes ages
          sudo apt-get install -y --install-recommends=no \
            git-buildpackage dput debhelper lintian
          # lintian not strictly needed, but will make the tail end of github's
          # log a little more verbose.

          # Override debhelper compatibility level set in debian/control
          DH_COMPAT="$( grep -Po "(?<=Version: )[1-9][0-9]*(?=[.])" \
                            < <( dpkg --status debhelper ) )"
          [[ ${DH_COMPAT} ]] &&
          printf "::set-env name=%s::%s\n" \
                  "DH_COMPAT"              \
                  "${DH_COMPAT}"
          # NOTE:
          # DH_COMPAT is only relavent to this runner not the PPA build farm.

      - name: Checkout dosbox-staging
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          ref: ${{ env.DEBIAN_BRANCH }}
      - name: sanity check
        run: |
          set -x
          git config --local user.name  "$DEBFULLNAME"
          git config --local user.email "$DEBEMAIL"

          # if we are not the upstream dosbox-staging, remote add it
          if [[ ${GITHUB_REPOSITORY} != ${UPSTREAM_REPO} ]]
          then
            # is it worth also doing release snapshots?
            git remote add --track=master \
                upstream https://github.com/${UPSTREAM_REPO}
            git fetch upstream --shallow-since="${SHALLOW_SINCE}"
          fi
          # FIXME if we are upstream this script breaks
          # upstream needs to be set as origin, and other things..
      - name: package source
        run: |
          set -x
          gpg_key_id="$( grep -m1 -Po "(?<= )[[:xdigit:]]{40}" \
                             < <( gpg --list-keys ) )"
          hack_dch_py()
          {
            # Primary reason for this function is to get the commit history from
            # a branch not related to HEAD.
            # This is achieved by adding an "until" option, basically a copy of
            # the existing "since" option.

            # Secondary, allows malformed meta tag to work
            # namely "Fixes #nnn" which appears all to frequently
            # it is a hack

            # shellcheck disable=SC2207 # I want it to split
            _gbp=( $( file -h "$( type -p gbp )" ) )
            _dch=${_gbp[0]%gbp:}${_gbp[-1]%/*}/dch.py

            # hack dch to treat malformed meta tags as legit
            # e.g. "Fixes #381" should be "Fixes: #381"
            if [[ ! -e "${HOME}/dch.py" ]]
            then
              sed -E 's/(re.compile.+%s[)]:)([^?].+meta_closes_bug)/\1?\2/
                     ' "${_dch/scripts\/}" > "${HOME}/dch.py" || exit 11
            fi

            # default "until" is HEAD, add option to change it
            s="    " # whitespace for indents
            add_option="$s"
            add_option+='range_group.add_option('
            add_option+='"-u",  "--until", dest="until", '
            add_option+='help="commit to stop at (e.g. HEAD")'

            options_until+="${s}${s}"
            options_until+='if options.until:\n'
            options_until+="${s}${s}${s}until = options.until"

            sed -e '/commit to start from/a\\n'"${add_option}"'\n' \
                -e '/if options.since:/i\\n'"${options_until}"'\n' \
                -e 's/gbp\.dch/dch/' \
                "${_dch}"
          }
          patched_dch()
          {
            last_version="$( grep -Po ".+(?=-)" \
              < <( dpkg-parsechangelog --show-field Version ) )"
            last_treeish="v${last_version//\~/-}"

            local debVersion="${debVersion%-*}"
            until_treeish="v${debVersion//\~/-}"

            export PYTHONPATH="${HOME}"
            python3 <( hack_dch_py )        \
            --id-length=8                   \
            --meta-closes="Closes|LP|Fixes" \
            --since "${last_treeish}"       \
            --until "${until_treeish}"      \
            "${@}"
          }
          weekly_changelog()
          {
            # switch to weekly changelog
            # TODO figure out how to get gbp to use a custom changelog
            # it appears to be hardcodeed in gbp/scripts/dch.py
            # setting env var CHANGELOG results in:
            # 1. debian/changelog header and trailer being ammended
            # 2. debian/changelog-weekly is created, author entries are correct
            #    but commit descption is placeholer:
            #      [[[insert-git-dch-commit-message-here]]]
            if [[ -e debian/changelog-weekly ]]
            then
              cp debian/changelog-weekly debian/changelog
            fi

            # new changelog entry
            # exclude dot files|dirs and scripts/*
            local -a exclude=(
                               ':!.*'
                               ':!scripts/'
                               ':!src/platform/visualc'
                             )

            patched_dch --snapshot                    \
                        --new-version "${debVersion}" \
                        -- "${exclude[@]}"

            gbp dch -R --spawn-editor=never \
                       --dch-opt=--distribution=unstable

            cp debian/changelog debian/changelog-weekly

            git add debian/changelog-weekly
            git commit -m "Weekly snapshot $( date -I )"
            git push origin "${DEBIAN_BRANCH}"

          }
          adjust_changelog()
          {
            # Append the target distro's version number and substitute distro.

            local pattern='(\('${debVersion}')[^)]*([^ ]+ ).+;'
            local replace='\1'${ppa_version}'\2'${distro}';'
            sed -i -E 's/'"${pattern}"'/'"${replace}"'/' debian/changelog
          }
          adjust_control()
          {
            git restore debian/control
            rm debian/compat || true
            # it is redundant really, it would only matter if the series order
            # from LA_API reversed

            if [[ $dh_compat -gt 9 ]]
            then
              sed -i -E 's/(debhelper-compat \(= ?)[0-9]+/\1'${dh_compat}'/
                        ' debian/control
            else
              # fixups, hacks really,for older than bionic
              #
              # replace debhelper-compat (= N) with "debhelper, automake"
              sed -i -E 's/(debhelper)-compat \(= ?[0-9]+\)/\1, automake/
                        ' debian/control

              # install lecacy compat config file
              echo "${dh_compat}" > debian/compat

              # remove -flto
              # TODO instead of stripping -flto here
              #  export RANLIB="gcc-ranlib" in debian/rules, but I don't
              #  think -flto does much with older releases
              sed -i -E 's/ ?-flto(=[^ ]+ [^ ]+[)])?//;
                          /APPEND *=(\"\"| ?$)/d;
                          /APPEND=(\"\"|$)/d;
                          /auto_configure:/a\\t./autogen.sh
                        ' debian/rules
              # also added ./autogen.sh to start of version string hack
            fi
          }
          get_dh_compat()
          {
            # get the major version number of debhelper for distro
            query="${query:=getPackageUploads&name=debhelper&exact_match=true}"
            jq -r '.entries[] | select( .status == "Done"
                                   and  .pocket != "Backports" )
                   .display_version | sub("[.].+";""), halt
                  ' < <( curl --silent                            \
                              --compressed                        \
                              "${LP_API}${distro}?ws.op=${query}" )
          }

          # set debian version to most practically short string
          # e.g. 0.76.0~alpha~331~g53b1-1
          debVersion="$( sed 's/-/\~/g;s/^v//
                             ' < <( git describe --abbrev=4  \
                                        upstream/master    ) )-1"

          weekly_changelog

          # pre-export tarball
          build_area="../build-area"
          mkdir "${build_area}"
          gbp export-orig --tarball-dir="${build_area}"

          upload_orig_tarball="-sa" # This will be unset after first pass

          builder="debuild --set-envvar=DH_COMPAT=${DH_COMPAT}"

          for DISTRO in $( jq -j '.name,"_",.version," "' <<<"$PPA_DISTROS" )
          do
            ppa_version="+u${DISTRO#*_}"
                 distro="${DISTRO%_*}"

            dh_compat="$( get_dh_compat )"

            adjust_changelog
            adjust_control

            treeish=WC # Working Copy, therefore includes uncommited changes

            gbp buildpackage -i'(?!debian/)'               \
              -S --no-check-builddeps                      \
              -k"${gpg_key_id}"                            \
              --git-builder="${builder}"                   \
              --git-overlay                                \
              --git-tarball-dir="${build_area}"            \
              --git-export-dir="${build_area%/}/${distro}" \
              --git-export="${treeish}"                    \
              --git-postbuild="$(
               printf 'echo ::set-env name=%s::"$%s"\n'    \
                      "GBP_CHANGES_FILE_${distro}"         \
                      "GBP_CHANGES_FILE"
              )" "${upload_orig_tarball}" || exit 9
              unset upload_orig_tarball # only need to upload once
          done

          # -i'(?!debian/)' is to ignore anything on the DEBIAN_BRANCH
          # that is not in debian/ i.e. this yml script, and README.*
          # see dpkg-source(1)

          # -S is equivalent to --build=source, *must* use -S to avoid
          #  inconsistent behaviour of debuild and dpkg-buildpackage
          #  using long form results in debuild failing to use correct
          #  .changes file
      - name: push to PPA
        run: |
          set -x
          #TODO test the set-error works as I expect
          for DISTRO in $( jq -r '.name' <<<"$PPA_DISTROS" ||
                             printf "%s\n" "::set-error" 1>&2 )
          do
            declare -n GBP_CHANGES_FILE="GBP_CHANGES_FILE_$DISTRO"
            [[ ${GBP_CHANGES_FILE} ]] || continue
            dput ppa:${PPA_REPO} "${GBP_CHANGES_FILE}"
          done
      - name: check gpg expiry
        run: |
          set -x
          EXPIRY=$( date +%s -d \
                "$( grep -m1 -Po '(?<=expires: )[2-9][0-9]{3}(-[0-9]{2}){2}' \
                        < <( gpg --list-keys ) )" )
           TODAY="$( date +%s )"
          DAYSLEFT="$((  $(( $EXPIRY - $TODAY )) / 60/60/24 ))"
          [[ ${DAYSLEFT} -gt 60 ]] && exit 0 ||
          printf "gpg key expires in %s days\n" "${DAYSLEFT}" && exit 42
