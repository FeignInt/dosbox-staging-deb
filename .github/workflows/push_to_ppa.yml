# This is a basic workflow to help you get started with Actions

name: push to PPA

on:
  push:
    tags:
      - 'push_to_ppa/v*' # push_to_ppa/ prefix is just what I was using to test
      - 'debianlike/*-[2-9]'
      - 'debianlike/*-[1-9][0-9]+'
      - '!debianlike/*-1'
      - '!**-alpha**'    # ignore -alpha tags
      - '!**-pre**'      # ignore -pre tags
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: set env
      run: |
          export    debian_branch="debianlike"       # branch debian/ lives on
          export debian_changelog="debian/changelog" # no need to change

          export              TAG="${GITHUB_REF#refs/tags/}"
          export      upstreamTAG="${TAG}"

          export   upstreamPrefix="${TAG%%[0-9][.]*}"

          # account for debian versioned tags
          [[ $upstreamPrefix == ${debian_branch}/ ]] &&
          [[ ${TAG##*-} =~ ^([2-9]|[1-9][0-9]+)$  ]] &&
                             debSUFFIX="-${TAG##*-}" || debSUFFIX="-1"
          # i.e. if it looks like a debTAG preserve Suffix,
          # else reset to -1 ( debTAG will be created )

          # untested, I think the indentation here breaks yaml syntax
                       debVersion="${TAG%${debSUFFIX}}"
                       debVersion="${TAG/-/\~}"
                       debVersion="${debVersion#${upstreamPrefix}}"
                           debTAG="${debian_branch}/${debVersion/\~/_}"

          export       debVersion="${debVersion}${debSUFFIX}"
          export           debTAG="${debTAG}${debSUFFIX}"

          # These will be used in commit, changelog
          export      DEBFULLNAME=builddebtest
          export         DEBEMAIL=blddebtest@foo.com

          # The PPA to push to
          export PPA_ID=feignint/db-s-poc2

          export GPG_TTY="$(tty)"
          # import private gpg key used to sign, this must match the gpg key
          # registered with the PPA being pushed to.
          gpg --batch --import < <( base64 --decode <<<"$PPA_GPG_PK" )

          for envvar in                  \
                        debian_branch    \
                        debian_changelog \
                        TAG              \
                        upstreamTAG      \
                        upstreamPrefix   \
                        debVersion       \
                        debTAG           \
                        DEBFULLNAME      \
                        DEBEMAIL         \
                        GPG_TTY          \
                        PPA_ID           \
          ;do
            declare -n envvar_nameref="$envvar"
            printf "::set-env name=%s::%s\n"  \
                    "${envvar}"               \
                    "${envvar_nameref}"
          done

      env:
        PPA_GPG_PK: ${{ secrets.PPA_GPG_PK }}
    - name: install depends
      run: |
        set -x
        sudo apt-get update # upgrade takes ages
        sudo apt-get install -y --install-recommends=no \
          git-buildpackage dput debhelper lintian
          # lintian not strictly needed, but will make the tail end of github's
          # log a little more verbose.

    - name: Checkout dosbox-staging
      uses: actions/checkout@v2
        fetch-depth:  1
        ref:  ${{ env.debian_branch }}
    - name: sanity check
      run: |
        set -x
        # may need token for this, not sure
        git config --local user.name  "$DEBFULLNAME"
        git config --local user.email "$DEBEMAIL"
        # before continuing be certain TAG exists ( should never not exist )
        git fetch --prune --unshallow --tags --force
        [[ $( git tag --list "${TAG}" ) == "${TAG}" ]] || exit 2
    - name: Changelog
      run: |
        set -x
        append_changelog()
        {

          # create snapshot
          gbp dch --new-version="${debVersion}"  \
                  --snapshot                     \
                  --spawn-editor=never           \
                  -- debian/ || exit 6
          # tweak it
          PostEdit_Changelog
          # commit it
          gbp dch --release                      \
                  --spawn-editor=never           \
                  --commit || exit 7
        }

        Changelog_template()
        {
          # might have something useful in the tag annotation
          TagAnnotation="$(
            grep -E "^[^tag]{3}.+[0-9][.][0-9]{2}[.][0-9]"       \
              < <( git tag --verify "${upstreamTAG}" 2>/dev/null )
          )"
          Changelog=( "* ${TagAnnotation:-New Upstream Release:}\n" )

          # only include release notes link if it exists
          ReleaseNotesTAG="v${upstreamTAG#${upstreamPrefix}}" # note v prefix
          ReleaseNotesURL="https://dosbox-staging.github.io/${ReleaseNotesTAG//[.]/-}/"

          < <(curl -s --compressed "${ReleaseNotesURL}" ) \
            grep -m1 "404: Page not found" ||
              Changelog+=( "- ${ReleaseNotesURL}" )
        }

        PostEdit_Changelog()
        {
          Changelog_template

          while read -r
          do
            ExistingChangelogLines+=("$REPLY")
            [[ $REPLY =~ ^[\ ]- ]] && break
          done <"${debian_changelog}"

          if [[ ${ExistingChangelogLines[-3]} == "  * UNRELEASED" ]]
          then
            sedpattern="$(( ${#ExistingChangelogLines[@]} - 2 )){s@  \* UNRELEASED@"
            sedterminate="@}"
          else
            sedpattern="${#ExistingChangelogLines[@]}i"
            sedterminate='\n'
          fi

          sed -i "${sedpattern}$( printf "\ \ %s" "${Changelog[@]}" )${sedterminate}" \
            "${debian_changelog}"
        }

        [[ -e ${debian_changelog} ]] || exit 5
        LastChangelogVersion()
        {
          grep -m1 -Po "(?<=\()[^\)]+" "${debian_changelog}"
        }
        if [[ $(LastChangelogVersion) =~ ${debVersion//[.]/[.]} ]]
        then
          append_changelog && git push origin "${debian_branch}" "${debTAG}"
        fi

    - name: package source
      run: |
        set -x
        push_to_ppa()
        {
          printf 'dput ppa:%s "$%s"' \
                 "${PPA_ID}"         \
                 "GBP_CHANGES_FILE"
        }
        if [[ $( git tag --list "${debTAG}" ) == "${debTAG}" ]]
        then
          treeish="${debTAG}"
          tagging=""
        else
          treeish="HEAD"
          tagging="--git-tag"
        fi
        gbp buildpackage -i'(?!debian/)'                        \
          --build=source                                        \
          --no-check-builddeps                                  \
          -k$( grep -m1 -Po "(?<= )[[:xdigit:]]{40}"            \
                   < <( gpg --list-keys ) )                     \
          --git-overlay                                         \
          --git-export-dir=../build-area                        \
          --git-export="${treeish}" "${tagging}"                \
          --git-postbuild="$( push_to_ppa )" || exit 9
        # -i'(?!debian/)' is to ignore anything on the debian_branch
        # that is not in debian/ i.e. this yml script, and README.*
        # see dpkg-source(1)
    - name: check gpg expiry
      run: |
        EXPIRY=$( date +%s -d \
              "$( grep -m1 -Po '(?<=expires: )[2-9][0-9]{3}(-[0-9]{2}){2}' \
                      < <( gpg --list-keys ) )" )
         TODAY="$( date +%s )"
        DAYSLEFT="$((  $(( $EXPIRY - $TODAY )) / 60/60/24 ))"
        [[ ${DAYSLEFT} -lt 60 ]] &&
          printf "gpg key expires in %s days\n" "${DAYSLEFT}" && exit 42
